This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-26T17:10:10.718Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
models/
  __init__.py
  db_models.py
static/
  css/
    custom.css
templates/
  article.html
  base.html
  index.html
  news_by_date.html
app.py
config.py
env.sample
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: models/__init__.py
================
from config import engine
from models.db_models import Base

# Create the tables
Base.metadata.create_all(engine)

================
File: models/db_models.py
================
from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Index
from sqlalchemy.orm import relationship, declarative_base
from datetime import datetime

Base = declarative_base()


class Newspaper(Base):
    __tablename__ = "newspapers"

    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    url = Column(String(255), nullable=False)
    articles = relationship("Article", back_populates="newspaper")

    def __repr__(self):
        return f"<Newspaper(id={self.id}, name='{self.name}')>"


class Section(Base):
    __tablename__ = "sections"

    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    articles = relationship("Article", back_populates="section")
    generated_news = relationship("GeneratedNews", back_populates="section")  # Added relationship

    def __repr__(self):
        return f"<Section(id={self.id}, name='{self.name}')>"


class Article(Base):
    __tablename__ = "articles"

    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    link = Column(String(255), nullable=False, unique=True)
    content = Column(Text, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    published_at = Column(DateTime, nullable=True)

    # Foreign keys
    newspaper_id = Column(Integer, ForeignKey("newspapers.id"), nullable=False)
    section_id = Column(Integer, ForeignKey("sections.id"), nullable=False)

    # Relationships
    newspaper = relationship("Newspaper", back_populates="articles")
    section = relationship("Section", back_populates="articles")
    processed_article = relationship("ProcessedArticle", uselist=False, back_populates="article")

    # Indexes
    __table_args__ = (
        Index("ix_articles_newspaper_id", "newspaper_id"),
        Index("ix_articles_section_id", "section_id"),
        Index("ix_articles_published_at", "published_at"),
    )

    def __repr__(self):
        return f"<Article(id={self.id}, title='{self.title}', newspaper_id={self.newspaper_id}, section_id={self.section_id})>"


class ProcessedArticle(Base):
    """Model for storing preprocessed articles."""
    __tablename__ = "processed_articles"

    id = Column(Integer, primary_key=True)
    article_id = Column(Integer, ForeignKey("articles.id"), unique=True, nullable=False)
    article_created_at = Column(DateTime, nullable=False)
    processed_title = Column(String(255), nullable=False)
    processed_content = Column(Text, nullable=False)
    processed_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    keywords = Column(String(255), nullable=False)

    # Relationship to original article
    article = relationship("Article", back_populates="processed_article")

    # Indexes
    __table_args__ = (
        Index("ix_processed_articles_article_id", "article_id"),
        Index("ix_processed_articles_article_created_at", "article_created_at"),
        Index("ix_processed_articles_processed_at", "processed_at"),
    )

    def __repr__(self):
        return f"<ProcessedArticle(id={self.id}, article_id={self.article_id})>"

    @classmethod
    def from_article(cls, article: Article, processed_title: str, processed_content: str,
                     keywords: str) -> "ProcessedArticle":
        """Create a ProcessedArticle instance from an original Article."""
        return cls(
            article_id=article.id,
            article_created_at=article.created_at,
            processed_title=processed_title,
            processed_content=processed_content,
            keywords=keywords
        )


class GeneratedNews(Base):
    """Model for storing generated news articles."""
    __tablename__ = "generated_news"

    id = Column(Integer, primary_key=True)
    section_id = Column(Integer, ForeignKey("sections.id"), nullable=False)
    title = Column(String(255), nullable=False)
    body = Column(Text, nullable=False)
    generated_at = Column(DateTime, default=datetime.utcnow, nullable=False)

    # Relationships
    section = relationship("Section", back_populates="generated_news")

    # Indexes
    __table_args__ = (
        Index("ix_generated_news_section_id", "section_id"),
        Index("ix_generated_news_generated_at", "generated_at"),
    )

    def __repr__(self):
        return f"<GeneratedNews(id={self.id}, section_id={self.section_id}, title='{self.title}')>"

================
File: static/css/custom.css
================
/* Custom styles beyond Bootstrap */

/* Make article text more readable */
.card-text {
    font-size: 1.1rem;
    line-height: 1.7;
}

/* Add some spacing between paragraphs in article body */
.card-text p {
    margin-bottom: 1.5rem;
}

/* Improve readability of article titles */
.card-title {
    line-height: 1.4;
}

/* Style for the date navigation dropdown */
.dropdown-menu {
    max-height: 300px;
    overflow-y: auto;
}

/* Make footer stick to bottom */
body {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

main {
    flex: 1;
}

/* Responsive font sizes for article titles */
@media (max-width: 768px) {
    h1.card-title {
        font-size: 1.75rem;
    }
}

================
File: templates/article.html
================
{% extends "base.html" %}

{% block title %}{{ article.title }} - Noticias Argentina{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-lg-8">
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ url_for('home') }}">Inicio</a></li>
                <li class="breadcrumb-item"><a href="{{ url_for('news_by_date', date=article.generated_at.date()) }}">{{ article.generated_at.date()|format_date }}</a></li>
                <li class="breadcrumb-item active">{{ article.section.name }}</li>
            </ol>
        </nav>

        <article class="card">
            <div class="card-body">
                <h1 class="card-title mb-4">{{ article.title }}</h1>
                <div class="text-muted mb-4">
                    <small>
                        {{ article.generated_at|format_date }} | {{ article.section.name }}
                    </small>
                </div>
                <div class="card-text">
                    {{ article.body|safe }}
                </div>
            </div>
        </article>

        <div class="mt-4 text-center">
            <a href="{{ url_for('news_by_date', date=article.generated_at.date()) }}" class="btn btn-outline-dark">
                ← Volver a las noticias del día
            </a>
        </div>
    </div>
</div>
{% endblock %}

================
File: templates/base.html
================
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}Noticias Argentina{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/custom.css') }}" rel="stylesheet">
</head>
<body>
<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="/">Noticias Argentina</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Inicio</a>
                </li>
            </ul>
            {% if available_dates %}
            <div class="navbar-nav">
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                        {{ current_date|format_date }}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        {% for date in available_dates %}
                        <li>
                            <a class="dropdown-item {% if date == current_date %}active{% endif %}"
                               href="{{ url_for('news_by_date', date=date) }}">
                                {{ date|format_date }}
                            </a>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
</nav>

<!-- Main Content -->
<main class="container py-4">
    {% block content %}{% endblock %}
</main>

<!-- Footer -->
<footer class="footer mt-auto py-3 bg-light">
    <div class="container text-center">
        <span class="text-muted">© {% now 'local', '%Y' %} Noticias Argentina. Todos los derechos reservados.</span>
    </div>
</footer>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: templates/index.html
================
{% extends "base.html" %}

{% block title %}Noticias Argentina - {{ current_date|format_date }}{% endblock %}

{% block content %}
<div class="row">
    {% for section_name, news_list in news_by_section.items() %}
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header bg-dark text-white">
                <h5 class="card-title mb-0">{{ section_name }}</h5>
            </div>
            <div class="card-body">
                {% if news_list %}
                <ul class="list-unstyled mb-0">
                    {% for news in news_list %}
                    <li class="mb-3">
                        <a href="{{ url_for('article', news_id=news.id) }}" class="text-decoration-none">
                            <h6 class="mb-1">{{ news.title }}</h6>
                        </a>
                    </li>
                    {% endfor %}
                </ul>
                {% else %}
                <p class="text-muted mb-0">No hay noticias disponibles para esta sección.</p>
                {% endif %}
            </div>
        </div>
    </div>
    {% endfor %}
</div>

{% if not news_by_section %}
<div class="alert alert-info text-center">
    No hay noticias disponibles para {{ current_date|format_date }}.
</div>
{% endif %}
{% endblock %}

================
File: templates/news_by_date.html
================
{% extends "base.html" %}

{% block title %}Noticias Argentina - {{ current_date|format_date }}{% endblock %}

{% block content %}
<div class="mb-4">
    <h2 class="text-center">Noticias del {{ current_date|format_date }}</h2>
</div>

<div class="row">
    {% for section_name, news_list in news_by_section.items() %}
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header bg-dark text-white">
                <h5 class="card-title mb-0">{{ section_name }}</h5>
            </div>
            <div class="card-body">
                {% if news_list %}
                <ul class="list-unstyled mb-0">
                    {% for news in news_list %}
                    <li class="mb-3">
                        <a href="{{ url_for('article', news_id=news.id) }}" class="text-decoration-none">
                            <h6 class="mb-1">{{ news.title }}</h6>
                        </a>
                    </li>
                    {% endfor %}
                </ul>
                {% else %}
                <p class="text-muted mb-0">No hay noticias disponibles para esta sección.</p>
                {% endif %}
            </div>
        </div>
    </div>
    {% endfor %}
</div>

{% if not news_by_section %}
<div class="alert alert-info text-center">
    No hay noticias disponibles para {{ current_date|format_date }}.
</div>
{% endif %}
{% endblock %}

================
File: app.py
================
from flask import Flask, render_template, abort
from datetime import datetime
from sqlalchemy import distinct, func
from config import SessionLocal
from models.db_models import GeneratedNews, Section

app = Flask(__name__)


def get_db():
    db = SessionLocal()
    try:
        return db
    finally:
        db.close()


@app.template_filter('format_date')
def format_date(date):
    """Convert date to Spanish format"""
    return date.strftime("%d de %B de %Y").replace("January", "Enero") \
        .replace("February", "Febrero").replace("March", "Marzo") \
        .replace("April", "Abril").replace("May", "Mayo") \
        .replace("June", "Junio").replace("July", "Julio") \
        .replace("August", "Agosto").replace("September", "Septiembre") \
        .replace("October", "Octubre").replace("November", "Noviembre") \
        .replace("December", "Diciembre")


@app.route('/')
def home():
    db = get_db()
    # Get today's date (without time)
    today = datetime.utcnow().date()

    # Get all sections with their news for today
    sections = db.query(Section).all()

    # Get all news for today grouped by section
    news_by_section = {}
    for section in sections:
        news = db.query(GeneratedNews) \
            .filter(func.date(GeneratedNews.generated_at) == today) \
            .filter(GeneratedNews.section_id == section.id) \
            .all()
        news_by_section[section.name] = news

    # Get all available dates for navigation
    available_dates = db.query(distinct(func.date(GeneratedNews.generated_at))) \
        .order_by(func.date(GeneratedNews.generated_at).desc()) \
        .all()
    available_dates = [date[0] for date in available_dates]  # Unpack tuple

    return render_template('index.html',
                           news_by_section=news_by_section,
                           current_date=today,
                           available_dates=available_dates)


@app.route('/noticias/<string:date>')
def news_by_date(date):
    try:
        # Convert string date to datetime
        selected_date = datetime.strptime(date, '%Y-%m-%d').date()
    except ValueError:
        abort(404)

    db = get_db()
    sections = db.query(Section).all()

    # Get news for selected date grouped by section
    news_by_section = {}
    for section in sections:
        news = db.query(GeneratedNews) \
            .filter(func.date(GeneratedNews.generated_at) == selected_date) \
            .filter(GeneratedNews.section_id == section.id) \
            .all()
        news_by_section[section.name] = news

    # Get all available dates for navigation
    available_dates = db.query(distinct(func.date(GeneratedNews.generated_at))) \
        .order_by(func.date(GeneratedNews.generated_at).desc()) \
        .all()
    available_dates = [date[0] for date in available_dates]

    return render_template('news_by_date.html',
                           news_by_section=news_by_section,
                           current_date=selected_date,
                           available_dates=available_dates)


@app.route('/noticia/<int:news_id>')
def article(news_id):
    db = get_db()
    news = db.query(GeneratedNews).get(news_id)
    if news is None:
        abort(404)

    return render_template('article.html', article=news)


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


if __name__ == '__main__':
    app.run(debug=True)

================
File: config.py
================
import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Get the database URL from environment variables
DATABASE_URL = os.getenv('DATABASE_URL')

# Create the database engine
engine = create_engine(DATABASE_URL)

# Create a configured "Session" class
SessionLocal = sessionmaker(bind=engine)

================
File: env.sample
================
DATABASE_URL=mysql+mysqlconnector://root:password@localhost/news_db

================
File: README.md
================
# News Website

A simple Flask web application for displaying generated news articles organized by sections. The application allows
users to browse news by date and view articles categorized by sections.

## Features

- Display news articles organized by sections
- Navigate news by date
- View full article content
- Responsive design using Bootstrap
- Spanish language interface
- Date navigation dropdown

## Setup

1. Install dependencies:

```bash
pip install -r requirements.txt
```

2. Configure environment variables:

```bash
# Copy the sample environment file
cp env.sample .env

# Edit .env with your credentials
# DATABASE_URL=mysql+mysqlconnector://user:password@localhost/news_db
```

## Running the Application

```bash
# Method 1: Using Flask command
export FLASK_APP=app.py 
export FLASK_ENV=development
flask run

# Method 2: Direct Python execution
python3 app.py
```

The application will be available at http://127.0.0.1:5000/

## Development

- The application runs in debug mode by default when using `python app.py`
- Templates use Jinja2 templating engine
- Bootstrap 5 is used for styling
- Custom CSS is minimal and builds upon Bootstrap

================
File: requirements.txt
================
Flask==3.1.0
SQLAlchemy==2.0.36
Flask-SQLAlchemy==3.1.1
python-dotenv==1.0.1
mysql-connector-python==9.1.0
Jinja2==3.1.4
Werkzeug==3.1.3
